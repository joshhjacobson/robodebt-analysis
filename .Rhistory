labs(
x = "Fortnightly Income",
y = "Payment Recieved",
title = "Payment Recieved: Austudy"
) +
xlim(c(800, 1500))
dev.off()
png("payment_recieved_slope.png", units="in", width=6, height=5, pointsize=9, res=160)
pivot_longer(payment_data, cols = 2:last_col(), names_to = "Situation") %>%
ggplot(aes(x = income, y = value)) +
geom_line(size = 0.8, alpha = 0.6, aes(color = Situation)) +
geom_vline(xintercept = c(437, 524), linetype = "dotted") +
scale_colour_brewer(
palette = "Set1",
labels = lapply(situations, function(s) s$label)
) +
theme_bw() +
theme(
panel.grid = element_blank(),
legend.position = c(0.55, 0.4)
) +
labs(
x = "Fortnightly Income",
y = "Payment Recieved",
title = "Payment Recieved: Austudy"
) +
xlim(c(400, 550))
dev.off()
income_cap_diff <- data.frame(
Calculated = sapply(situations, calc_income_cap),
Stated = sapply(situations, stated_income_cap)
) %>%
mutate(Difference = Stated - Calculated)
View(income_cap_diff)
income_cap_diff <- data.frame(
Situation = sapply(situations, function(s) s$label),
Calculated = sapply(situations, calc_income_cap),
Stated = sapply(situations, stated_income_cap)
) %>%
mutate(Difference = Stated - Calculated)
View(income_cap_diff)
mu <- seq(400, 1000, 100)
sigma <- seq(100, 400, 100)
?rnorm
rnorm(10)
?ifelse
N <- 26
ifelse(rnorm(N) > 0, rnorm(N), 0)
X <- rnorm(N)
X <- rnorm(N)
ifelse(X > 0, X, 0)
X
X <- rnorm(1, mean=0, sd=c(1,2))
X
X <- rnorm(1, mean=0, sd=c(1,2))
X
X <- rnorm(mean=0, sd=c(1,2))
X
X <- rnorm(n=1, mean=0, sd=c(1,2))
X
install.packages("msm")
?msm::rtnorm
X <- msm::rtnorm(n=1, mean=0, sd=c(1,2), lower=0)
X <- msm::rtnorm(n=1, mean=0, sd=1, lower=0)
X <- msm::rtnorm(26, mean=0, sd=1, lower=0)
X
?expand.grid
expand.grid(mu, sigma)
params <- expand.grid(
mu = seq(400, 1000, 100),
sigma = seq(200, 400, 100)
)
View(params)
apply(params, 1, msm::rtnorm, n=N, mean=params$mu, sd=params$sigma)
apply(params, 1, msm::rtnorm, n=2, mean=params$mu, sd=params$sigma)
apply(params, 1, msm::rtnorm, n=2, mean=10, sd=params$sigma)
params <- expand.grid(
# mu = seq(400, 1000, 100),
mu = 10,
sigma = seq(200, 400, 100)
)
apply(params, 1, msm::rtnorm, n=2, mean=params$mu, sd=params$sigma)
plot(apply(params, 1, msm::rtnorm, n=2, mean=params$mu, sd=params$sigma))
df <- data.frame(apply(params, 1, msm::rtnorm, n=2, mean=params$mu, sd=params$sigma)))
df <- data.frame(apply(params, 1, msm::rtnorm, n=2, mean=params$mu, sd=params$sigma))
View(df)
plot.ts(df)
df <- data.frame(apply(params, 1, msm::rtnorm, n=N, mean=params$mu, sd=params$sigma))
plot.ts(df)
View(params)
params <- expand.grid(
# mu = seq(400, 1000, 100),
mu = 10,
sigma = c(2, 40, 100)
)
df <- data.frame(apply(params, 1, msm::rtnorm, n=N, mean=params$mu, sd=params$sigma))
plot.ts(df)
df <- data.frame(apply(params, 1, msm::rtnorm, n=N, mean=params$mu, sd=params$sigma))
plot.ts(df)
params <- expand.grid(
# mu = seq(400, 1000, 100),
mu = 10,
sigma = c(1, 50, 300)
)
df <- data.frame(apply(params, 1, msm::rtnorm, n=N, mean=params$mu, sd=params$sigma))
plot.ts(df)
View(df)
df <- data.frame(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2])))
View(df)
df <- data.frame(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
View(df)
plot.ts(df)
income_sim <- data.frame(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
N <- 26
params <- expand.grid(
mu = seq(400, 1000, 100),
sigma = seq(100, 400, 100)
)
income_sim <- data.frame(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
View(income_sim)
income_sim <- data.frame(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)), row.names=NULL)
View(income_sim)
income_sim <- data.frame(t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)), row.names=NULL))
income_sim <- data.frame(t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0))), row.names=NULL)
View(income_sim)
income_sim <- data.frame(t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0))))
income_sim <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
View(income_sim)
income_sim <- cbind(params, X)
X <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
income_sim <- cbind(params, X)
View(income_sim)
cat("X", seq(1,10))
paste("A", 1:6, sep = "")
length(X)
dim(X, 2)
dim(X)
colnames(X) <- paste("X", 1:dim(X)[2])
View(X)
colnames(X) <- paste0("X", 1:dim(X)[2])
View(X)
library(tidyverse)
?pivot_longer
income_sim <- cbind(params, X) %>%
pivot_longer(cols=select(starts_with("X")), names_to="Income")
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="Income")
View(income_sim)
set_situation <- function(
label,
max_payment,
thresholds,
rates,
income_cap
) {
# Construct situation object
# args:
#   label: situation label
#   max_payment: maximum fortnightly payment possible
#   thresholds: income levels at which payment is reduced by corresponding rates
#   rates: fraction of each dollar payment is reduced by when income exceeds corresponding threshold
#   income_cap: maximum income before payment reduces to $0
# value:
#   situation: list storing each of the input values
return (
list(
label = label,
max_payment = max_payment,
t1 = thresholds[1],
r1 = rates[1],
t2 = thresholds[2],
r2 = rates[2],
step = (thresholds[2] - thresholds[1])*rates[1],
# income_cap = income_cap
income_cap = uniroot(function(x) max_payment - step - (x - t2)*r2, interval = c(500, 2000))$root
)
)
}
payment_received <- function(situation, x) {
# Calculate the payment received in a given fortnight based on situation and corresponding fortnightly income.
# args:
#   situation: list describing the individual's sitation
#   x: fortnightly income (scalar or vector valued)
# value:
#   payment: social security payment recieved
ifelse(x < situation$t1, situation$max_payment,
ifelse(x < situation$t2, situation$max_payment - (x-situation$t1)*situation$r1,
ifelse(x < situation$income_cap, situation$max_payment - situation$step - (x-situation$t2)*situation$r2, 0)))
}
income <- seq(0, 1500, 5)
situations <- list(
single_under18_home = set_situation(
label = "Single, under 18, living at home",
max_payment = 462.5,
thresholds = c(437.0, 524.0),
rates = c(0.5, 0.6),
income_cap = 880.0
),
single_children = set_situation(
label = "Single with children",
max_payment = 606.0,
thresholds = c(437.0, 524.0),
rates = c(0.5, 0.6),
income_cap = 1476.84
),
couple_children = set_situation(
label = "In a couple, with children",
max_payment = 507.9,
thresholds = c(437.0, 524.0),
rates = c(0.5, 0.6),
income_cap = 1310.84
)
)
calc_income_cap <- function(
max_payment,
thresholds,
rates
) {
# Calculate maximum income before payment actually reduces to $0.
uniroot(function(x) max_payment - (thresholds[2] - thresholds[1])*rates[1] - (x - thresholds[2])*rates[2], interval = c(500, 2000))$root
}
set_situation <- function(
label,
max_payment,
thresholds,
rates,
# income_cap
) {
# Construct situation object
# args:
#   label: situation label
#   max_payment: maximum fortnightly payment possible
#   thresholds: income levels at which payment is reduced by corresponding rates
#   rates: fraction of each dollar payment is reduced by when income exceeds corresponding threshold
#   income_cap: maximum income before payment reduces to $0
# value:
#   situation: list storing each of the input values
return (
list(
label = label,
max_payment = max_payment,
t1 = thresholds[1],
r1 = rates[1],
t2 = thresholds[2],
r2 = rates[2],
step = (thresholds[2] - thresholds[1])*rates[1],
# income_cap = income_cap
income_cap = calc_income_cap(max_payment, thresholds, rates)
)
)
}
payment_received <- function(situation, x) {
# Calculate the payment received in a given fortnight based on situation and corresponding fortnightly income.
# args:
#   situation: list describing the individual's sitation
#   x: fortnightly income (scalar or vector valued)
# value:
#   payment: social security payment recieved
ifelse(x < situation$t1, situation$max_payment,
ifelse(x < situation$t2, situation$max_payment - (x-situation$t1)*situation$r1,
ifelse(x < situation$income_cap, situation$max_payment - situation$step - (x-situation$t2)*situation$r2, 0)))
}
income <- seq(0, 1500, 5)
situations <- list(
single_under18_home = set_situation(
label = "Single, under 18, living at home",
max_payment = 462.5,
thresholds = c(437.0, 524.0),
rates = c(0.5, 0.6),
income_cap = 880.0
),
single_children = set_situation(
label = "Single with children",
max_payment = 606.0,
thresholds = c(437.0, 524.0),
rates = c(0.5, 0.6),
income_cap = 1476.84
),
couple_children = set_situation(
label = "In a couple, with children",
max_payment = 507.9,
thresholds = c(437.0, 524.0),
rates = c(0.5, 0.6),
income_cap = 1310.84
)
)
calc_income_cap <- function(
max_payment,
thresholds,
rates
) {
# Calculate maximum income before payment actually reduces to $0.
uniroot(function(x) max_payment - (thresholds[2] - thresholds[1])*rates[1] - (x - thresholds[2])*rates[2], interval = c(500, 2000))$root
}
set_situation <- function(
label,
max_payment,
thresholds,
rates,
# income_cap
) {
# Construct situation object
# args:
#   label: situation label
#   max_payment: maximum fortnightly payment possible
#   thresholds: income levels at which payment is reduced by corresponding rates
#   rates: fraction of each dollar payment is reduced by when income exceeds corresponding threshold
#   income_cap: maximum income before payment reduces to $0
# value:
#   situation: list storing each of the input values
return (
list(
label = label,
max_payment = max_payment,
t1 = thresholds[1],
r1 = rates[1],
t2 = thresholds[2],
r2 = rates[2],
step = (thresholds[2] - thresholds[1])*rates[1],
# income_cap = income_cap
income_cap = calc_income_cap(max_payment, thresholds, rates)
)
)
}
set_situation <- function(
label,
max_payment,
thresholds,
rates
# income_cap
) {
# Construct situation object
# args:
#   label: situation label
#   max_payment: maximum fortnightly payment possible
#   thresholds: income levels at which payment is reduced by corresponding rates
#   rates: fraction of each dollar payment is reduced by when income exceeds corresponding threshold
#   income_cap: maximum income before payment reduces to $0
# value:
#   situation: list storing each of the input values
return (
list(
label = label,
max_payment = max_payment,
t1 = thresholds[1],
r1 = rates[1],
t2 = thresholds[2],
r2 = rates[2],
step = (thresholds[2] - thresholds[1])*rates[1],
# income_cap = income_cap
income_cap = calc_income_cap(max_payment, thresholds, rates)
)
)
}
payment_received <- function(situation, x) {
# Calculate the payment received in a given fortnight based on situation and corresponding fortnightly income.
# args:
#   situation: list describing the individual's sitation
#   x: fortnightly income (scalar or vector valued)
# value:
#   payment: social security payment recieved
ifelse(x < situation$t1, situation$max_payment,
ifelse(x < situation$t2, situation$max_payment - (x-situation$t1)*situation$r1,
ifelse(x < situation$income_cap, situation$max_payment - situation$step - (x-situation$t2)*situation$r2, 0)))
}
income <- seq(0, 1500, 5)
situations <- list(
single_under18_home = set_situation(
label = "Single, under 18, living at home",
max_payment = 462.5,
thresholds = c(437.0, 524.0),
rates = c(0.5, 0.6),
income_cap = 880.0
),
single_children = set_situation(
label = "Single with children",
max_payment = 606.0,
thresholds = c(437.0, 524.0),
rates = c(0.5, 0.6),
income_cap = 1476.84
),
couple_children = set_situation(
label = "In a couple, with children",
max_payment = 507.9,
thresholds = c(437.0, 524.0),
rates = c(0.5, 0.6),
income_cap = 1310.84
)
)
situations <- list(
single_under18_home = set_situation(
label = "Single, under 18, living at home",
max_payment = 462.5,
thresholds = c(437.0, 524.0),
rates = c(0.5, 0.6)
# income_cap = 880.0
),
single_children = set_situation(
label = "Single with children",
max_payment = 606.0,
thresholds = c(437.0, 524.0),
rates = c(0.5, 0.6)
# income_cap = 1476.84
),
couple_children = set_situation(
label = "In a couple, with children",
max_payment = 507.9,
thresholds = c(437.0, 524.0),
rates = c(0.5, 0.6)
# income_cap = 1310.84
)
)
payment_data <- data.frame(
income = income,
lapply(situations, payment_received, income)
)
View(payment_data)
N <- 26
params <- expand.grid(
mu = seq(400, 1000, 100),
sigma = seq(100, 400, 100)
)
X <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
colnames(X) <- paste0("X", 1:dim(X)[2])
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="Income")
View(income_sim)
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), values_to="income")
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="income") %>%
mutate(lapply(situations, payment_received, income))
lapply(situations, payment_received, income_sim$income)
temp <- lapply(situations, payment_received, income_sim$income)
View(temp)
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="income") %>%
add_column(lapply(situations, payment_received, income))
temp <- sapply(situations, payment_received, income_sim$income)
View(temp)
temp <- apply(situations, 1, payment_received, income_sim$income)
temp <- lapply(situations, payment_received, income_sim$income)
temp <- data.frame(lapply(situations, payment_received, income_sim$income))
temp <- lapply(situations, payment_received, income_sim$income)
View(X)
temp <- lapply(situations, payment_received, income_sim$income)
View(temp)
payment_data <- data.frame(
income = income,
lapply(situations, payment_received, income)
)
View(payment_data)
unlist(temp)
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="income") %>%
add_column(unlist(lapply(situations, payment_received, income)))
temp <- tibble(lapply(situations, payment_received, income_sim$income))
View(temp)
temp <- tibble(unlist(lapply(situations, payment_received, income_sim$income)))
View(temp)
temp <- as.data.frame(lapply(situations, payment_received, income_sim$income))
View(temp)
L <- lapply(situations, payment_received, income_sim$income)
length(L)
df <- data.frame(matrix(unlist(L), ncol=length(L), byrow=F))
View(df)
df <- data.frame(matrix(unlist(L), ncol=length(L), byrow=T))
View(df)
df <- data.frame(matrix(unlist(L), nrow=length(L[1]), byrow=FALSE))
View(df)
df <- data.frame(matrix(unlist(L), nrow=length(L[1]), byrow=T))
View(df)
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="income") %>%
mutate(function(income) payment_received(situations[1], income))
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="income") %>%
mutate(blah = function(income) payment_received(situations[1], income))
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="income") %>%
mutate(payment_received(situations[1], income))
length(L[0])
L <- lapply(situations, payment_received, income_sim$income)
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="income")
View(income_sim)
L <- lapply(situations, payment_received, income_sim$income)
length(L[0])
View(L)
L[0]
L$single_under18_home
L[[0]]
?cbind
df <- cbind(income_sim, L)
View(df)
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="income") %>%
cbind(., lapply(situations, payment_received, income))
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="income") %>%
add_column(lapply(situations, payment_received, income))
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="income") %>%
bind_cols(lapply(situations, payment_received, income))
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="income") %>%
bind_cols(lapply(situations, payment_received, income_sim$income))
View(income_sim)
income_sim <- cbind(params, X) %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="income") %>%
bind_cols(lapply(situations, payment_received, .$income))
?bind_cols
