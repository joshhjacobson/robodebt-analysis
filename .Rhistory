#   select(fortnight, everything()) %>%
#   mutate(
#     payment_entitled = payment_received(situation, fnight_avg_income),
#     payment_received = payment_received(situation, sim_income),
#     difference = payment_entitled - payment_received
#   )
return(df)
}
df1 <- robodebt_difference(situations$single_under18_home, N=26, mean=seq(400, 1000, 100), sd=seq(100, 400, 100))
View(df1)
robodebt_difference <- function(
situation,
N,
mean,
sd
) {
# Simulate N fortnightly income periods and calculate Robodebt algorithm differential.
# args:
# situation: situation list object
# N: number of fortnightly periods
# mean: vector of means from which truncated Gaussian income will be simulated
# sd: vector of standard deviations from which truncated Gaussian income will be simulated
# value:
# df: data frame containing simulated income and details on payment differential
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
colnames(sim_income) <- paste0("X", 1:dim(X)[2])
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
return(df)
}
df1 <- robodebt_difference(situations$single_under18_home, N=26, mean=seq(400, 1000, 100), sd=seq(100, 400, 100))
View(df1)
df2 <- robodebt_difference(situations$single_children, N, mu, sig)
N <- 26
mu <- seq(400, 1000, 100)
sig <- seq(100, 400, 100)
df1 <- robodebt_difference(situations$single_under18_home, N, mu, sig)
df2 <- robodebt_difference(situations$single_children, N, mu, sig)
df3 <- robodebt_difference(situations$couple_children , N, mu, sig)
View(df3)
robodebt_difference <- function(
situation,
N,
mean,
sd
) {
# Simulate N fortnightly income periods and calculate Robodebt algorithm differential.
# args:
# situation: situation list object
# N: number of fortnightly periods
# mean: vector of means from which truncated Gaussian income will be simulated
# sd: vector of standard deviations from which truncated Gaussian income will be simulated
# value:
# df: data frame containing simulated income and details on payment differential
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
View(params)
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
colnames(sim_income) <- paste0("X", 1:dim(X)[2])
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
return(df)
}
df1 <- robodebt_difference(situations$single_under18_home, N, mu, sig)
robodebt_difference <- function(
situation,
N,
mean,
sd
) {
# Simulate N fortnightly income periods and calculate Robodebt algorithm differential.
# args:
# situation: situation list object
# N: number of fortnightly periods
# mean: vector of means from which truncated Gaussian income will be simulated
# sd: vector of standard deviations from which truncated Gaussian income will be simulated
# value:
# df: data frame containing simulated income and details on payment differential
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
colnames(params) <- c("mean", "sd")
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
colnames(sim_income) <- paste0("X", 1:dim(X)[2])
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
return(df)
}
N <- 26
mu <- seq(400, 1000, 100)
sig <- seq(100, 400, 100)
df1 <- robodebt_difference(situations$single_under18_home, N, mu, sig)
df2 <- robodebt_difference(situations$single_children, N, mu, sig)
df3 <- robodebt_difference(situations$couple_children , N, mu, sig)
View(df1)
df1 %>%
ggplot(aes(x=fortnight, y=difference, color=select(mean, sd)))
df1 %>%
ggplot(aes(x=fortnight, y=difference, color=mean:sd))
ggplot(aes(x=fortnight, y=difference, color=interaction(mean, sd))
df1 %>%
df1 %>%
df1 %>%
df1 %>%
ggplot(aes(x=fortnight, y=difference, color=interaction(mean, sd))) +
geom_line()
df1 %>%
ggplot(aes(x=fortnight, y=difference, color=interaction(mean, sd))) +
geom_point()
df1 %>%
ggplot(aes(x=seq(1,N), y=difference, color=interaction(mean, sd))) +
geom_point()
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
colnames(params) <- c("mean", "sd")
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
colnames(sim_income) <- paste0("X", 1:dim(X)[2])
View(sim_income)
seq(1:dim(X)[2])
# colnames(sim_income) <- paste0("X", 1:dim(X)[2])
colnames(sim_income) <- seq(1:dim(X)[2])
View(sim_income)
robodebt_difference <- function(
situation,
N,
mean,
sd
) {
# Simulate N fortnightly income periods and calculate Robodebt algorithm differential.
# args:
# situation: situation list object
# N: number of fortnightly periods
# mean: vector of means from which truncated Gaussian income will be simulated
# sd: vector of standard deviations from which truncated Gaussian income will be simulated
# value:
# df: data frame containing simulated income and details on payment differential
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
colnames(params) <- c("mean", "sd")
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
# colnames(sim_income) <- paste0("X", 1:dim(X)[2])
colnames(sim_income) <- seq(1:dim(X)[2])
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
return(df)
}
df1 <- robodebt_difference(situations$single_under18_home, N, mu, sig)
df2 <- robodebt_difference(situations$single_children, N, mu, sig)
df3 <- robodebt_difference(situations$couple_children , N, mu, sig)
robodebt_difference <- function(
situation,
N,
mean,
sd
) {
# Simulate N fortnightly income periods and calculate Robodebt algorithm differential.
# args:
# situation: situation list object
# N: number of fortnightly periods
# mean: vector of means from which truncated Gaussian income will be simulated
# sd: vector of standard deviations from which truncated Gaussian income will be simulated
# value:
# df: data frame containing simulated income and details on payment differential
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
colnames(params) <- c("mean", "sd")
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
# colnames(sim_income) <- paste0("X", 1:dim(X)[2])
colnames(sim_income) <- seq(1:dim(X)[2])
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=select(3:last_col()), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
return(df)
}
N <- 26
mu <- seq(400, 1000, 100)
sig <- seq(100, 400, 100)
df1 <- robodebt_difference(situations$single_under18_home, N, mu, sig)
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=select(3:last_col()), names_to="fortnight", values_to="sim_income")
?everything
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=select(3:last_col()), names_to="fortnight", values_to="sim_income")
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income)
View(df)
%>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=select(4:last_col()), names_to="fortnight", values_to="sim_income")
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=select(4:last_col()), names_to="fortnight", values_to="sim_income")
robodebt_difference <- function(
situation,
N,
mean,
sd
) {
# Simulate N fortnightly income periods and calculate Robodebt algorithm differential.
# args:
# situation: situation list object
# N: number of fortnightly periods
# mean: vector of means from which truncated Gaussian income will be simulated
# sd: vector of standard deviations from which truncated Gaussian income will be simulated
# value:
# df: data frame containing simulated income and details on payment differential
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
colnames(params) <- c("mean", "sd")
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
colnames(sim_income) <- paste0("X", 1:dim(X)[2])
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
fortnight = as.numeric(fortnight),
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
return(df)
}
N <- 26
mu <- seq(400, 1000, 100)
sig <- seq(100, 400, 100)
df1 <- robodebt_difference(situations$single_under18_home, N, mu, sig)
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
fortnight = gsub("[^0-9.-]", "", fortnight),
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
colnames(params) <- c("mean", "sd")
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
colnames(sim_income) <- paste0("X", 1:dim(X)[2])
View(sim_income)
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
fortnight = gsub("[^0-9.-]", "", fortnight),
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
robodebt_difference <- function(
situation,
N,
mean,
sd
) {
# Simulate N fortnightly income periods and calculate Robodebt algorithm differential.
# args:
# situation: situation list object
# N: number of fortnightly periods
# mean: vector of means from which truncated Gaussian income will be simulated
# sd: vector of standard deviations from which truncated Gaussian income will be simulated
# value:
# df: data frame containing simulated income and details on payment differential
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
colnames(params) <- c("mean", "sd")
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
colnames(sim_income) <- paste0("X", 1:dim(X)[2])
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
fortnight = gsub("[^0-9.-]", "", fortnight),
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
return(df)
}
N <- 26
mu <- seq(400, 1000, 100)
sig <- seq(100, 400, 100)
df1 <- robodebt_difference(situations$single_under18_home, N, mu, sig)
View(df1)
df1 %>%
ggplot(aes(x=fortnight, y=difference, color=interaction(mean, sd))) +
geom_point()
rm(params, sim_income, df)
rm(situation_fnight_diff)
robodebt_difference <- function(
situation,
N,
mean,
sd
) {
# Simulate N fortnightly income periods and calculate Robodebt algorithm differential.
# args:
# situation: situation list object
# N: number of fortnightly periods
# mean: vector of means from which truncated Gaussian income will be simulated
# sd: vector of standard deviations from which truncated Gaussian income will be simulated
# value:
# df: data frame containing simulated income and details on payment differential
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
colnames(params) <- c("mean", "sd")
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
colnames(sim_income) <- paste0("X", 1:dim(X)[2])
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
fortnight = as.numeric(gsub("[^0-9.-]", "", fortnight),)
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
return(df)
}
N <- 26
mu <- seq(400, 1000, 100)
sig <- seq(100, 400, 100)
df1 <- robodebt_difference(situations$single_under18_home, N, mu, sig)
df2 <- robodebt_difference(situations$single_children, N, mu, sig)
df3 <- robodebt_difference(situations$couple_children , N, mu, sig)
df1 %>%
ggplot(aes(x=fortnight, y=difference, color=interaction(mean, sd))) +
geom_point()
robodebt_difference <- function(
situation,
N,
mean,
sd
) {
# Simulate N fortnightly income periods and calculate Robodebt algorithm differential.
# args:
# situation: situation list object
# N: number of fortnightly periods
# mean: vector of means from which truncated Gaussian income will be simulated
# sd: vector of standard deviations from which truncated Gaussian income will be simulated
# value:
# df: data frame containing simulated income and details on payment differential
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
colnames(params) <- c("mean", "sd")
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
colnames(sim_income) <- paste0("X", 1:dim(X)[2])
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
fortnight = as.numeric(gsub("[^0-9.-]", "", fortnight))
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
return(df)
}
N <- 26
mu <- seq(400, 1000, 100)
sig <- seq(100, 400, 100)
df1 <- robodebt_difference(situations$single_under18_home, N, mu, sig)
df2 <- robodebt_difference(situations$single_children, N, mu, sig)
df3 <- robodebt_difference(situations$couple_children , N, mu, sig)
robodebt_difference <- function(
situation,
N,
mean,
sd
) {
# Simulate N fortnightly income periods and calculate Robodebt algorithm differential.
# args:
# situation: situation list object
# N: number of fortnightly periods
# mean: vector of means from which truncated Gaussian income will be simulated
# sd: vector of standard deviations from which truncated Gaussian income will be simulated
# value:
# df: data frame containing simulated income and details on payment differential
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
colnames(params) <- c("mean", "sd")
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
colnames(sim_income) <- paste0("X", 1:dim(X)[2])
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
fortnight = as.numeric(gsub("[^0-9.-]", "", fortnight))
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
return(df)
}
robodebt_difference <- function(
situation,
N,
mean,
sd
) {
# Simulate N fortnightly income periods and calculate Robodebt algorithm differential.
# args:
# situation: situation list object
# N: number of fortnightly periods
# mean: vector of means from which truncated Gaussian income will be simulated
# sd: vector of standard deviations from which truncated Gaussian income will be simulated
# value:
# df: data frame containing simulated income and details on payment differential
## Collect parameters used to simulate N samples from a truncated Gaussian distribution
params <- expand.grid(mean, sd)
colnames(params) <- c("mean", "sd")
## Simulate N fornightly samples for each parameter set
sim_income <- t(apply(params, 1, function(p) msm::rtnorm(N, mean=p[1], sd=p[2], lower=0)))
colnames(sim_income) <- paste0("X", 1:dim(X)[2])
## Gather parameters with simulations and compute payment entitled, recieved and the difference
df <- cbind(params, rowMeans(sim_income), sim_income) %>%
rename("fnight_avg_income" = "rowMeans(sim_income)") %>%
pivot_longer(cols=starts_with("X"), names_to="fortnight", values_to="sim_income") %>%
select(fortnight, everything()) %>%
mutate(
fortnight = as.numeric(gsub("[^0-9.-]", "", fortnight)),
payment_entitled = payment_received(situation, fnight_avg_income),
payment_received = payment_received(situation, sim_income),
difference = payment_entitled - payment_received
)
return(df)
}
N <- 26
mu <- seq(400, 1000, 100)
sig <- seq(100, 400, 100)
df1 <- robodebt_difference(situations$single_under18_home, N, mu, sig)
df2 <- robodebt_difference(situations$single_children, N, mu, sig)
df3 <- robodebt_difference(situations$couple_children , N, mu, sig)
df1 %>%
ggplot(aes(x=fortnight, y=difference, color=interaction(mean, sd))) +
geom_point()
df1 %>%
ggplot(aes(x=fortnight, y=difference)) +
geom_point() +
facet_grid(mean ~ sd)
